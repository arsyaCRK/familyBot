package main

import (
	"bufio"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
	"os/exec"
	"strings"
)

const (
	Bogdan         = "–ë–æ–≥–¥–∞–Ω"
	Veronika       = "–í–µ—Ä–æ–Ω–∏–∫–∞"
	BackToMainMenu = "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è"
	Back           = "–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨ÖÔ∏è"
)

var (
	token = os.Getenv("TOKEN")
	name  string
)

type UserState struct {
	CurrentKeyboard string
	KeyboardHistory []string
}

var userStates = make(map[int64]*UserState)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panicf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %s", err)
	}

	fmt.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ %s\n", bot.Self.UserName)

	bot.Debug = false

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		//fmt.Printf("[%s] %s\n", update.Message.From.UserName, update.Message.Text)

		fmt.Printf("–ö–æ–ª–±—ç–∫: %s", update.CallbackQuery)

		if update.CallbackQuery != nil {

			handleCallbackQuery(bot, update.CallbackQuery)
			continue
		} else if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				sendMessage(bot, update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –Ω–æ–≤—ã–π —Å–µ–º–π–Ω—ã–π Telegram-–±–æ—Ç –¥–ª—è —É–¥–æ–±–≤—Ç—Å–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –Ω–∞—á–∏–ª—Å–µ–Ω–∏—è –±–∞–ª–ª–æ–≤. üòâ")
				sendStartMenu(bot, update.Message.Chat.ID)
			default:
				continue
			}
		} else {
			switch update.Message.Text {
			case "–°–ø—Ä–∞–≤–∫–∞ üÜò":
				sendMessage(bot, update.Message.Chat.ID, "–•–æ—Ä–æ—à–∏–µ –¥–µ–ª–∞ –∏ –±–∞–ª–ª—ã!\n\n1. –ü–æ–º–æ—â—å –ø–æ –¥–æ–º—É üè†\n–£–±–æ—Ä–∫–∞ –≤ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ ‚Äî 5 –±–∞–ª–ª–æ–≤\n–ú—ã—Ç—å—ë –ø–æ—Å—É–¥—ã ‚Äî 5 –±–∞–ª–ª–æ–≤\n–í—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞ ‚Äî 3 –±–∞–ª–ª–∞\n–ü–æ–º–æ—â—å –≤ –≥–æ—Ç–æ–≤–∫–µ –µ–¥—ã ‚Äî 7 –±–∞–ª–ª–æ–≤\n–ü–æ–º–æ—â—å –≤ —É–±–æ—Ä–∫–µ –ø–æ –¥–æ–º—É - 7 –±–∞–ª–ª–æ–≤. \n\n2. –£—á—ë–±–∞ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ üë®‚Äçüéì\n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî 10 –±–∞–ª–ª–æ–≤\n–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç) ‚Äî 7 –±–∞–ª–ª–æ–≤\n–í—ã—É—á–µ–Ω–Ω–æ–µ –Ω–æ–≤–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Å–Ω—è ‚Äî 10 –±–∞–ª–ª–æ–≤\n–£–ª—É—á—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ‚Äî 15 –±–∞–ª–ª–æ–≤\n\n3. –î–æ–±—Ä–æ—Ç–∞ –∏ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ üëç\n–ü–æ–º–æ—â—å –±—Ä–∞—Ç—É –∏–ª–∏ —Å–µ—Å—Ç—Ä–µ ‚Äî 7 –±–∞–ª–ª–æ–≤\n–í–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Å—å –¥–µ–Ω—å ‚Äî 5 –±–∞–ª–ª–æ–≤\n–î–æ–±—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–º–æ—á—å —Å–æ—Å–µ–¥—É –∏–ª–∏ –¥—Ä—É–≥—É) ‚Äî 10 –±–∞–ª–ª–æ–≤\n\n4. –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üîã\n–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Äî 5 –±–∞–ª–ª–æ–≤\n–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞) ‚Äî 5 –±–∞–ª–ª–æ–≤\n–£—á–∞—Å—Ç–∏–µ –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –∏–ª–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö ‚Äî 10 –±–∞–ª–ª–æ–≤\n\n---\n\n–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –±–∞–ª–ª—ã! üèÜ\n\n1. –ú–∞–ª–µ–Ω—å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (–¥–æ 30 –±–∞–ª–ª–æ–≤):\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç (30 –º–∏–Ω—É—Ç) ‚Äî 20 –±–∞–ª–ª–æ–≤\n–ù–∞–∫–ª–µ–π–∫–∞ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∞—è –∏–≥—Ä—É—à–∫–∞ ‚Äî 25 –±–∞–ª–ª–æ–≤\n–°–ª–∞–¥–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —à–æ–∫–æ–ª–∞–¥–∫–∞) ‚Äî 30 –±–∞–ª–ª–æ–≤\n\n2. –°—Ä–µ–¥–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (30‚Äì70 –±–∞–ª–ª–æ–≤):\n–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ –∏–ª–∏ –∫–∞—Ñ–µ ‚Äî 50 –±–∞–ª–ª–æ–≤\n–í—ã–±–æ—Ä –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Ñ–∏–ª—å–º–∞ –¥–ª—è –≤–µ—á–µ—Ä–∞ ‚Äî 50 –±–∞–ª–ª–æ–≤\n–õ–µ–≥–æ –∏–ª–∏ –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞ ‚Äî 70 –±–∞–ª–ª–æ–≤\n\n3. –ö—Ä—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã (70+ –±–∞–ª–ª–æ–≤):\n–ë–æ–ª—å—à–∞—è –∏–≥—Ä—É—à–∫–∞ ‚Äî 100 –±–∞–ª–ª–æ–≤\n–ü–æ–µ–∑–¥–∫–∞ –≤ –ø–∞—Ä–∫ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ ‚Äî 150 –±–∞–ª–ª–æ–≤\n–î–µ–Ω—å –±–µ–∑ –¥–æ–º–∞—à–Ω–∏—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π ‚Äî 70 –±–∞–ª–ª–æ–≤.")
			case "–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã üåü":
				switch update.Message.From.UserName {
				case "arsyacrk", "Alyona_270688":
					pushKeyboardHistory(update.Message.Chat.ID, "menuPlus1")
					sendPlusScores(bot, update.Message.Chat.ID)
				default:
					sendMessage(bot, update.Message.Chat.ID, "–í–∞–º –∑–∞—Ä–ø–µ—â–µ–Ω–æ –Ω–∞—á–∏—Å–ª—è—Ç—å –±–∞–ª–ª—ã!")
					continue
				}
			case "–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã ‚õîÔ∏è":
				switch update.Message.From.UserName {
				case "arsyacrk", "Alyona_270688":
					pushKeyboardHistory(update.Message.Chat.ID, "menuMinus1")
					sendMinusScores(bot, update.Message.Chat.ID)
				default:
					sendMessage(bot, update.Message.Chat.ID, "–í–∞–º –∑–∞—Ä–ø–µ—â–µ–Ω–æ —Å–ø–∏—Å—ã–≤–∞—Ç—å –±–∞–ª–ª—ã!")
					continue
				}
			case BackToMainMenu:
				pushKeyboardHistory(update.Message.Chat.ID, "")
				sendStartMenu(bot, update.Message.Chat.ID)
			case "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–ª—ã üö©":
				loadScores(bot, update.Message.Chat.ID)
			case Bogdan, Veronika:
				name = update.Message.Text
				pushKeyboardHistory(update.Message.Chat.ID, "menuPlusMinus2")
				kbdSectionsPlus(bot, update.Message.Chat.ID)
			case "–ü–æ–º–æ—â—å –ø–æ –¥–æ–º—É üè†":
				pushKeyboardHistory(update.Message.Chat.ID, "menuPlus3")
				kbdScoresHomeHelp(bot, update.Message.Chat.ID)
			case "–£—á—ë–±–∞ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ üë®‚Äçüéì":
				pushKeyboardHistory(update.Message.Chat.ID, "menuPlus3")
				kbdScoresLearning(bot, update.Message.Chat.ID)
			case "–î–æ–±—Ä–æ—Ç–∞ –∏ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ üëç":
				pushKeyboardHistory(update.Message.Chat.ID, "menuPlus3")
				kbdScoresGoodness(bot, update.Message.Chat.ID)
			case "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üîã":
				pushKeyboardHistory(update.Message.Chat.ID, "menuPlus3")
				kbdScoresActivity(bot, update.Message.Chat.ID)
			case "–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –≤—Ä—É—á–Ω—É—é":
				kbdReplyManual(bot, update.Message.Chat.ID, name)
			case Back:
				if lastKeyboard, ok := popKeyboardHistory(update.Message.Chat.ID); ok {
					switch lastKeyboard {
					case "menuPlus1":
						sendPlusScores(bot, update.Message.Chat.ID)
					case "menuPlusMinus2":
						kbdSectionsPlus(bot, update.Message.Chat.ID)
					}
				} else {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é")
					if _, err := bot.Send(msg); err != nil {
						panic(err)
					}
				}
			default:
				continue
			}
		}
	}

}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä
func pushKeyboardHistory(chatID int64, keyboardName string) {
	if _, ok := userStates[chatID]; !ok {
		userStates[chatID] = &UserState{
			CurrentKeyboard: keyboardName,
			KeyboardHistory: []string{},
		}
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏—é
	if userStates[chatID].CurrentKeyboard != "" {
		userStates[chatID].KeyboardHistory = append(userStates[chatID].KeyboardHistory, userStates[chatID].CurrentKeyboard)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ —Ç–µ–∫—É—â—É—é
	userStates[chatID].CurrentKeyboard = keyboardName
}

func popKeyboardHistory(chatID int64) (string, bool) {
	if state, ok := userStates[chatID]; ok && len(state.KeyboardHistory) > 0 {
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
		lastKeyboard := state.KeyboardHistory[len(state.KeyboardHistory)-1]

		// –£–¥–∞–ª—è–µ–º –µ—ë –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
		state.KeyboardHistory = state.KeyboardHistory[:len(state.KeyboardHistory)-1]

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—É—â—É—é
		state.CurrentKeyboard = lastKeyboard

		return lastKeyboard, true
	}
	return "", false
}

func handleCallbackQuery(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	fmt.Printf("–î–∞–Ω–Ω—ã–µ: %s", data)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏)
	callbackConfig := tgbotapi.NewCallback(callback.ID, "")
	if _, err := bot.Request(callbackConfig); err != nil {
		log.Println(err)
	}

	switch data {
	case "10":
		sendMessage(bot, chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ 10")
	case "20":
		sendMessage(bot, chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Inline –¥–µ–π—Å—Ç–≤–∏–µ 20")
	}
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
func sendMessage(bot *tgbotapi.BotAPI, chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, message)
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
func deleteMessage(bot *tgbotapi.BotAPI, chatID int64, messageID int) {
	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	deleteConfig := tgbotapi.NewDeleteMessage(chatID, messageID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	_, err := bot.Request(deleteConfig)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	} else {
		log.Println("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
	}
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
func sendStartMenu(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã üåü"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã ‚õîÔ∏è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–ª—ã üö©"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–°–ø—Ä–∞–≤–∫–∞ üÜò"),
		),
	)
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

func kbdReplyManual(bot *tgbotapi.BotAPI, chatID int64, messageText string) {
	messageText = fmt.Sprintf("–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–∏—Ç—å %s: ", messageText)
	msg := tgbotapi.NewMessage(chatID, messageText)

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("5", "10"),
			tgbotapi.NewInlineKeyboardButtonData("10", "20"),
			tgbotapi.NewInlineKeyboardButtonData("15", "20"),
			tgbotapi.NewInlineKeyboardButtonData("20", "20"),
			tgbotapi.NewInlineKeyboardButtonData("30", "20"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("40", "10"),
			tgbotapi.NewInlineKeyboardButtonData("50", "20"),
			tgbotapi.NewInlineKeyboardButtonData("60", "20"),
			tgbotapi.NewInlineKeyboardButtonData("70", "20"),
			tgbotapi.NewInlineKeyboardButtonData("80", "20"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("90", "10"),
			tgbotapi.NewInlineKeyboardButtonData("100", "20"),
			tgbotapi.NewInlineKeyboardButtonData("150", "20"),
		),
	)
	msg.ReplyMarkup = inlineKeyboard
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—á–∏–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
func kbdSectionsPlus(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ")

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–º–æ—â—å –ø–æ –¥–æ–º—É üè†"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£—á—ë–±–∞ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ üë®‚Äçüéì"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–î–æ–±—Ä–æ—Ç–∞ –∏ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ üëç"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üîã"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –≤—Ä—É—á–Ω—É—é"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(Back),
			tgbotapi.NewKeyboardButton(BackToMainMenu),
		),
	)
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∏–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–º–æ—â—å –ø–æ –¥–æ–º—É
func kbdScoresHomeHelp(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª–æ–≤ –∏ –∑–∞ —á—Ç–æ: ")

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£–±–æ—Ä–∫–∞ –≤ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ ‚Äî 5 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ú—ã—Ç—å—ë –ø–æ—Å—É–¥—ã ‚Äî 5 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í—ã–Ω–æ—Å –º—É—Å–æ—Ä–∞ ‚Äî 3 –±–∞–ª–ª–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–º–æ—â—å –≤ –≥–æ—Ç–æ–≤–∫–µ –µ–¥—ã ‚Äî 7 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–º–æ—â—å –≤ —É–±–æ—Ä–∫–µ –ø–æ –¥–æ–º—É - 7 –±–∞–ª–ª–æ–≤."),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(Back),
			tgbotapi.NewKeyboardButton(BackToMainMenu),
		),
	)
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

// –§—É–Ω–∫—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞ –¥–æ–±—Ä–æ—Ç—É –∏ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
func kbdScoresGoodness(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª–æ–≤ –∏ –∑–∞ —á—Ç–æ: ")

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–º–æ—â—å –±—Ä–∞—Ç—É –∏–ª–∏ —Å–µ—Å—Ç—Ä–µ ‚Äî 7 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Å—å –¥–µ–Ω—å ‚Äî 5 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–î–æ–±—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–º–æ—á—å —Å–æ—Å–µ–¥—É –∏–ª–∏ –¥—Ä—É–≥—É) ‚Äî 10 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(Back),
			tgbotapi.NewKeyboardButton(BackToMainMenu),
		),
	)
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∏–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ –£—á—ë–±–∞ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
func kbdScoresLearning(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª–æ–≤ –∏ –∑–∞ —á—Ç–æ: ")

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî 10 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç) ‚Äî 7 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–í—ã—É—á–µ–Ω–Ω–æ–µ –Ω–æ–≤–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Å–Ω—è ‚Äî 10 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£–ª—É—á—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ‚Äî 15 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(Back),
			tgbotapi.NewKeyboardButton(BackToMainMenu),
		),
	)
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∏–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
func kbdScoresActivity(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª–æ–≤ –∏ –∑–∞ —á—Ç–æ: ")

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Äî 5 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞) ‚Äî 5 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£—á–∞—Å—Ç–∏–µ –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –∏–ª–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö ‚Äî 10 –±–∞–ª–ª–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(Back),
			tgbotapi.NewKeyboardButton(BackToMainMenu),
		),
	)
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–∞—á–∏–ª—Å–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
func sendPlusScores(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –Ω–∞—á–∏–ª—Å–∏—Ç—å –±—ã–ª–ª–ª—ã: ")

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(Bogdan),
			tgbotapi.NewKeyboardButton(Veronika),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(BackToMainMenu),
		),
	)
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤
func sendMinusScores(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ, —É –∫–æ–≥–æ —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã: ")

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(Bogdan),
			tgbotapi.NewKeyboardButton(Veronika),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(BackToMainMenu),
		),
	)
	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–ª–ª—ã –∏–∑ —Ñ–∞–π–ª–∞
func loadScores(bot *tgbotapi.BotAPI, chatID int64) {

	file, err := os.Open("scores.txt")
	if err != nil {
		return
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {
			panic(err)
		}
	}(file)

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		parts := strings.Split(line, ":")
		if len(parts) == 2 {
			name := parts[0]
			score := parts[1]

			state := fmt.Sprintf("%s: %s", name, score)
			voiceFileName := fmt.Sprintf("voice%s.mp3", name)
			textToSpeech(bot, chatID, state, voiceFileName)

			msg := tgbotapi.NewMessage(chatID, state)
			if _, err := bot.Send(msg); err != nil {
				panic(err)
			}
		}
	}
}

func textToSpeech(bot *tgbotapi.BotAPI, chatID int64, text string, filename string) {
	t := text
	outputFile := filename
	cmd := exec.Command("espeak-ng", "-v", "ru", "-w", outputFile, t)

	err := cmd.Run()
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:", err)
		os.Exit(1)
		return
	}

	fmt.Printf("–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: %s\n", outputFile)

	msg := tgbotapi.NewVoice(chatID, tgbotapi.FilePath(outputFile))

	if _, err := bot.Send(msg); err != nil {
		panic(err)
	}
}
